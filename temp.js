class Point {
  constructor(x, y) {
    // Инициализация объекта
    this.x = x;
    this.y = y;
  }

  getXY() {
    return `x: ${this.x},  y: ${this.y}`;
  }
}

const a = new Point(6, 10); // { x: 6, y: 10 }

a.getXY(); // x: 6, y: 10

// Класс-наследник (субкласс, подкласс)
class Point3d extends Point {
  constructor(x, y, z) {
    // Вызов конструктора суперкласса
    super(x, y);
    // Продолжение инициализации объекта
    this.z = z;
  }

  getXYZ() {
    return `${super.getXY()}, z: ${this.z}`;
  }
}

const b = new Point3d(0, 0, 20);

b.getXY(); // x: 0, y: 0
b.getXYZ(); // x: 0,  y: 0, z: 20

// протокол, как закрыть всплывающее окно в реакте,  Socket

// Как будешь работать с древовидной структурой данных? см. Селиконовая долина - речь шла не про итерации, а логорифмич алгоритм

// Почему состояние в компоненте нельзя напрямую менять в React?

// JWT tokens

// Спрашивали по типам данных
// области видимости,
// виды объявления,
// методом массивов,
// про контекст,
// про bind, call, apply,
// Работал ли с генераторами,
//  Работал ли с unit тестированием,
//  работал ли с классовыми компонентами,
//  о жизненых этапах компонента,
//  правила использования хуков (не ответил!),
//  писал ли кастомные хуки,
//  про State спрашивали, про connect тоже спрашивали (mapStateToProps, mapDispatchToProps), использовал ли я сборщики, Electron, как сделать State зависимый компонент,
// что такое Virtual Dom и в чем его концепция."
// JS: замыкание,
//  хоистинг,
//  контекст функций,
//, геттеры и сеттеры
// сss: shadowDOM, вес селекторов, flex и order react: рассказала про все хуки и редакс, спрашивали useCallback useDebugValue

// Event loop, погружение-захват-всплытие, ООП, agile-методологии,
// stopProganation, микротаски макротаски, виртуальный дом дерево (почему он копируется - ответ: типа посмотри в консоли как ведет себя querySelector, а виртальный дом не такой - он легковесный), умные глупые компоненты. Задание что выведет консоль: const bar = {a: 1}; const foo = bar; bar.a = 2; console.log(foo, bar) (a: 2; в обоих случаях так как ссылка одна)

// useRef, про то, работал ли с Redux-form или Formix, про то, для чего мидллварки, что они позволяют делать, про то, что такое генераторы, про webpack, про React mixin. В целом старалась узнать как можно больше, с чем работал.
//  методы массивов, вар лет конст, CORS, куки и сессии, JWT-токены

// , отличия grid  от flex, типы запросов к серверу, отличие put от post, какая команда в гите может слить изменения из разных веток в main (не помню как называется, начинается на ч)

// Быстро начал опрашивать технически, после простых вопрос про вакансию. promise.all, react-router-dom, redirect, hooks, HTTP, Websockert, DNS

// по верстке - позиционирование, виды отображения элементов. по реакту - что передаем в компоненты, можно ли пустой массив(можно), редакс - глубокое копирование стэйта(нельзя). про покрытие тестами - дает ли 100-процентное покрытие избежать ошибок в коде - не дает, ассерты? паттерны программирования, архитектура, что такое приватные поля, связанный список, вигмапы

// "Всего 2 задания на лайвкодинг, но зато какие...
// 1е: Спроектировать БД, в котором пользователи могут создавать опросы, в которых должны быть вопросы, с одним или несколькими вариантами ответа. Вопросы могут быть зависимы от прошлого ответа. Необходимо вывести все опросы, в которых на один вопрос ответило больше 5 человек. Можно либо через БД, либо через Redux
// 2е: Необходимо написать функцию, которая проверяет является ли дерево бинарным (У каждого узла не более двух детей)
// "Нативные способы реализации ленивой загрузки
// принципы реакта (реактивность)"
//как работает браузер
// "html, паттерны проектирования какие используешь, почему, как трестируешь код, React - классовые и функциональные,  какой и когда использовать, дебаггинг на React (с помощью какой-то Фили которая есть только в классовых, как я понял), очень много про работу браузера, про редакс, все хуки реакта очень подробно просили рассказать, очень глубоко по каждому вопросу - даже если отвечал - еще 100 вопросов параллельно прилетало, но это объяснимо - Потому что они ищут middle-senior который один будет вывозить проект и в дальнейшем под него команду собирать
// "
// про работу браузера, очень много было вопросов как что сделать - объяснить на словах просили, JS много - promise, асинхронность, event loop, WEB API, React hooks
//анонимные функции чтобы вызвать нужно присвоить переменной const anon = function () {} или обернуть в ИФИ ()()
// 1. типы данных,
// 2. var, let, const,
// 3. bind apply call, Что такое чистые функции, что такое анонимные функции, явное и неявное присваивание контекста
// 4. Event Loop
// 5. Задали задачку, нужно сказать чему равен x const x = Promise.resolve().then(()=>42) // then 42
// 7. Методы Промисс, спросили про то, что будет, если в Promiss,all случится ошибка, можно ли менять состояние промисов
// 8. Спросили про REST как расшифровывается, что из себя представляет
// 9. Спросили про WebSocket, как его можно заменить с использованием обычных инструментов. (Pooling)
// 10. Методы HTTP, про OPTIONS
// 11. CORS
// 12. Спросили про то, как рендерится страница, про repaint, reflow
// 13. Порядок загрузки скриптов,
// 14 ТЕстирование, Пирамида тестирования
// 15. Много вопросов про css, про спецификацию, про приоритеты, селекторы, important, про то, что имеет больший приоритет style указанный непосредственно в элементе или id стиля в таблице CSS
// 16. Responsive верстка, что такое, Адаптивная верстка, с какие препроцессорами и постпроцессорами работал.
// 17. Спросили про styled component.
// 18. ЧТо такое БЭМ, примеры
// 19. Box-sizing что такое, какие есть варианты
// 20. Про позиционирование, рассказать о каждом
// 21. Про ноду, на основе чего работает (V8), что ей позволяет работать с EventLoop, с работой с файлами (LibUI)
// 22. ПРо то, как можно разделить на потоки через ноду (Кластеризация, Exec)
// 23. Про потоки данных в ноде
// 24. Про типы обработки ошибок (Глобальная обработка)
// 25. Что такое Виртуальный дом, в чем его преимущество
// 26. Prop types
// 27. Основные хуки реакта.
// 28. Какой и для чего используются, подробно рассказать.
// 29. Спрашивали про примеры использования хуков
// 30. Контролируемые, не контролируемые компоненты. Привести пример
// 31. Для чего также может использоваться useRef (создание custom Hook для ссылки на предыдущее состояние), куда он может ссылаться
// 32. Этапы жизненного цикла компонентов.
// 33. Как используется useEffect, примеры. Спрашивали про то, как использовать с массивом зависимости, без массива, как очистить данные, отписаться от событий после размонтирования
// 34. Про useMemo, useCallback, в чем отличие, можно ли использовать useMemo вместо колбэка (можно, если результатом работы функции будет функция)
// 35. Как используется useContext, зачем он, в чём минус оборачивания всего приложения в него (контекст меняется сразу весь, а не точечно => перерендер всего)
// 36. Что такое Redux, что из себя представляет, что такое flux
// 37. В чём отличие thunk от saga.
// 38. Что такое однонаправленный поток данных
// 39. Основные принципы редакса (state не меняется, reducer чистая функция, однонаправленный поток данных)
// 40. Спрашивали про тестирование, когда стоит применять, как стоит применять.
// вывести уникальные значения из массива (привет Set), и сделать конкатенацию строк, на основе отсортированных свойств объекта...
// const tournament = {
//     title: 'Tournament',
//     status: 'active',
//     prizes: [
//         { id: 81, place: 2, name: ""Bar"" },
//         { id: 12, place: 1, name: ""Foo"" },
//         { id: 44, place: 3, name: ""Baz"" }
//     ],
// }
// чтобы вывелось  “Foo, Bar, Baz”"

// Async await, promise, get или post И подробнее спросили про useState, useEffect. Зачем useSelector в Redux, использовал ли MongoDB (у них монга просто), какие самые сложные задачи были в работе,  как посылаю запросы с фронта на бек (что пишу на фронте, что пишу на беке)
// Как работает адаптив бутстрап (на медиа запросах),  как навесить событие на li (навесить его на document или ul),  rem em что в них заложено (размер шрифта) и в чем разница

// что делает super у класса)

// В чем разница между em & rem, как лучше называть css классы

// исторические причины появления функционального програмирования (multifraging),
// какие основные правила функционального программирования.
// Как вообще в программировании нужно строить компоненты (без
// привязки к реакту), что такое компоненты, как лучше организовать код, дали пример кода и сказали какой паттерн программирования здесь был бы лучше (composition?). "
// Теория: Замыкания, функции, объекты, промисы - рассказать все что знаешь своими словами. Лайвкодинг - задача на карирование из learn java script

// сравнение объектов
// очень много про объекты

// , контекст, Промисы, async/await, useMemo, useCallback, нарисовать с помощью html, css очки(два круга и между ними линия) задачи что выведется в консоль(Промисы)
// чем отличается usecontext от redux, что такое чистая функция, какие хуки я знаю, про useRef спрашивал, про web socket, протоколы, CORS
// "Методы оптимизации js, html, про Хуки все, свойства display(подробно про каждый рассказать)
// Рассказывали про другое применение useRef, методология БЭМ, как у нас загружается веб страница, есть ли опыт работы с scss, grid
// Промисы, async, await
// Try, catch"
// Принципы ООП (инкапсуляция, наследование, полиморфизм)
// MVP
// CORS, скрытые токены, виды оптимизации сайта, префеч.

// "ВебСокеты - несколько вкладок с чатом - что нужно сделать, чтобы чат работал только в первой и когда она закрывалась - включался в следующей (промямлил что то про SessionStorage, он рассказал что нужно сделать слушатель события или проверку по таймеру и сделать массив с айдишниками страниц)
// Валидация форм - какую делал на фронте и беке"

// "10 дивов с позицией абсолют и одинаковым z-индексом, какой будет отображаться
// жизненные циклы компонентов
// гоняли по методам массивов
